// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	communityentity "macaiki/internal/community/entity"
	entity "macaiki/internal/user/entity"

	mock "github.com/stretchr/testify/mock"

	threadentity "macaiki/internal/thread/entity"
)

// CommunityRepository is an autogenerated mock type for the CommunityRepository type
type CommunityRepository struct {
	mock.Mock
}

// AddModerator provides a mock function with given fields: user, _a1
func (_m *CommunityRepository) AddModerator(user entity.User, _a1 communityentity.Community) error {
	ret := _m.Called(user, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User, communityentity.Community) error); ok {
		r0 = rf(user, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommunity provides a mock function with given fields: communityID
func (_m *CommunityRepository) DeleteCommunity(communityID uint) error {
	ret := _m.Called(communityID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(communityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowCommunity provides a mock function with given fields: user, _a1
func (_m *CommunityRepository) FollowCommunity(user entity.User, _a1 communityentity.Community) error {
	ret := _m.Called(user, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User, communityentity.Community) error); ok {
		r0 = rf(user, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCommunities provides a mock function with given fields: userID, search
func (_m *CommunityRepository) GetAllCommunities(userID uint, search string) ([]communityentity.Community, error) {
	ret := _m.Called(userID, search)

	var r0 []communityentity.Community
	if rf, ok := ret.Get(0).(func(uint, string) []communityentity.Community); ok {
		r0 = rf(userID, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]communityentity.Community)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommunity provides a mock function with given fields: id
func (_m *CommunityRepository) GetCommunity(id uint) (communityentity.Community, error) {
	ret := _m.Called(id)

	var r0 communityentity.Community
	if rf, ok := ret.Get(0).(func(uint) communityentity.Community); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(communityentity.Community)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommunityAbout provides a mock function with given fields: userID, communityID
func (_m *CommunityRepository) GetCommunityAbout(userID uint, communityID uint) (communityentity.Community, error) {
	ret := _m.Called(userID, communityID)

	var r0 communityentity.Community
	if rf, ok := ret.Get(0).(func(uint, uint) communityentity.Community); ok {
		r0 = rf(userID, communityID)
	} else {
		r0 = ret.Get(0).(communityentity.Community)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommunityThread provides a mock function with given fields: userID, communityID
func (_m *CommunityRepository) GetCommunityThread(userID uint, communityID uint) ([]threadentity.ThreadWithDetails, error) {
	ret := _m.Called(userID, communityID)

	var r0 []threadentity.ThreadWithDetails
	if rf, ok := ret.Get(0).(func(uint, uint) []threadentity.ThreadWithDetails); ok {
		r0 = rf(userID, communityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threadentity.ThreadWithDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommunityWithDetail provides a mock function with given fields: userID, communityID
func (_m *CommunityRepository) GetCommunityWithDetail(userID uint, communityID uint) (communityentity.Community, error) {
	ret := _m.Called(userID, communityID)

	var r0 communityentity.Community
	if rf, ok := ret.Get(0).(func(uint, uint) communityentity.Community); ok {
		r0 = rf(userID, communityID)
	} else {
		r0 = ret.Get(0).(communityentity.Community)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorByCommunityID provides a mock function with given fields: userID, communityID
func (_m *CommunityRepository) GetModeratorByCommunityID(userID uint, communityID uint) ([]entity.User, error) {
	ret := _m.Called(userID, communityID)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(uint, uint) []entity.User); ok {
		r0 = rf(userID, communityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorByUserID provides a mock function with given fields: userID, communityID
func (_m *CommunityRepository) GetModeratorByUserID(userID uint, communityID uint) (communityentity.CommunityModerator, error) {
	ret := _m.Called(userID, communityID)

	var r0 communityentity.CommunityModerator
	if rf, ok := ret.Get(0).(func(uint, uint) communityentity.CommunityModerator); ok {
		r0 = rf(userID, communityID)
	} else {
		r0 = ret.Get(0).(communityentity.CommunityModerator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportCommunity provides a mock function with given fields: id
func (_m *CommunityRepository) GetReportCommunity(id uint) (communityentity.CommunityReport, error) {
	ret := _m.Called(id)

	var r0 communityentity.CommunityReport
	if rf, ok := ret.Get(0).(func(uint) communityentity.CommunityReport); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(communityentity.CommunityReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReports provides a mock function with given fields: communityID
func (_m *CommunityRepository) GetReports(communityID uint) ([]communityentity.BriefReport, error) {
	ret := _m.Called(communityID)

	var r0 []communityentity.BriefReport
	if rf, ok := ret.Get(0).(func(uint) []communityentity.BriefReport); ok {
		r0 = rf(communityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]communityentity.BriefReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveModerator provides a mock function with given fields: user, _a1
func (_m *CommunityRepository) RemoveModerator(user entity.User, _a1 communityentity.Community) error {
	ret := _m.Called(user, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User, communityentity.Community) error); ok {
		r0 = rf(user, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCommunityImage provides a mock function with given fields: id, imageURL, tableName
func (_m *CommunityRepository) SetCommunityImage(id uint, imageURL string, tableName string) error {
	ret := _m.Called(id, imageURL, tableName)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, string) error); ok {
		r0 = rf(id, imageURL, tableName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreCommunity provides a mock function with given fields: _a0
func (_m *CommunityRepository) StoreCommunity(_a0 communityentity.Community) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(communityentity.Community) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreReportCommunity provides a mock function with given fields: communityReport
func (_m *CommunityRepository) StoreReportCommunity(communityReport communityentity.CommunityReport) error {
	ret := _m.Called(communityReport)

	var r0 error
	if rf, ok := ret.Get(0).(func(communityentity.CommunityReport) error); ok {
		r0 = rf(communityReport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnfollowCommunity provides a mock function with given fields: user, _a1
func (_m *CommunityRepository) UnfollowCommunity(user entity.User, _a1 communityentity.Community) error {
	ret := _m.Called(user, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User, communityentity.Community) error); ok {
		r0 = rf(user, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCommunity provides a mock function with given fields: _a0, communityReq
func (_m *CommunityRepository) UpdateCommunity(_a0 communityentity.Community, communityReq communityentity.Community) (communityentity.Community, error) {
	ret := _m.Called(_a0, communityReq)

	var r0 communityentity.Community
	if rf, ok := ret.Get(0).(func(communityentity.Community, communityentity.Community) communityentity.Community); ok {
		r0 = rf(_a0, communityReq)
	} else {
		r0 = ret.Get(0).(communityentity.Community)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(communityentity.Community, communityentity.Community) error); ok {
		r1 = rf(_a0, communityReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportCommunity provides a mock function with given fields: communityReport, userID
func (_m *CommunityRepository) UpdateReportCommunity(communityReport communityentity.CommunityReport, userID uint) error {
	ret := _m.Called(communityReport, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(communityentity.CommunityReport, uint) error); ok {
		r0 = rf(communityReport, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCommunityRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommunityRepository creates a new instance of CommunityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommunityRepository(t mockConstructorTestingTNewCommunityRepository) *CommunityRepository {
	mock := &CommunityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
