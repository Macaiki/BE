// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "macaiki/internal/community/dto"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	threaddto "macaiki/internal/thread/dto"
)

// CommunityUsecase is an autogenerated mock type for the CommunityUsecase type
type CommunityUsecase struct {
	mock.Mock
}

// AddModerator provides a mock function with given fields: moderatorReq, role
func (_m *CommunityUsecase) AddModerator(moderatorReq dto.CommunityModeratorRequest, role string) error {
	ret := _m.Called(moderatorReq, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.CommunityModeratorRequest, string) error); ok {
		r0 = rf(moderatorReq, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommunity provides a mock function with given fields: id, role
func (_m *CommunityUsecase) DeleteCommunity(id uint, role string) error {
	ret := _m.Called(id, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReportCommunity provides a mock function with given fields: reportCommunityId
func (_m *CommunityUsecase) DeleteReportCommunity(reportCommunityId uint) error {
	ret := _m.Called(reportCommunityId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(reportCommunityId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowCommunity provides a mock function with given fields: userID, communityID
func (_m *CommunityUsecase) FollowCommunity(userID uint, communityID uint) error {
	ret := _m.Called(userID, communityID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, communityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCommunities provides a mock function with given fields: userID, search
func (_m *CommunityUsecase) GetAllCommunities(userID int, search string) ([]dto.CommunityDetailResponse, error) {
	ret := _m.Called(userID, search)

	var r0 []dto.CommunityDetailResponse
	if rf, ok := ret.Get(0).(func(int, string) []dto.CommunityDetailResponse); ok {
		r0 = rf(userID, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CommunityDetailResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(userID, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommunity provides a mock function with given fields: userID, communityID
func (_m *CommunityUsecase) GetCommunity(userID uint, communityID uint) (dto.CommunityDetailResponse, error) {
	ret := _m.Called(userID, communityID)

	var r0 dto.CommunityDetailResponse
	if rf, ok := ret.Get(0).(func(uint, uint) dto.CommunityDetailResponse); ok {
		r0 = rf(userID, communityID)
	} else {
		r0 = ret.Get(0).(dto.CommunityDetailResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommunityAbout provides a mock function with given fields: userID, communityID
func (_m *CommunityUsecase) GetCommunityAbout(userID uint, communityID uint) (dto.CommunityAboutResponse, error) {
	ret := _m.Called(userID, communityID)

	var r0 dto.CommunityAboutResponse
	if rf, ok := ret.Get(0).(func(uint, uint) dto.CommunityAboutResponse); ok {
		r0 = rf(userID, communityID)
	} else {
		r0 = ret.Get(0).(dto.CommunityAboutResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReports provides a mock function with given fields: userID, communityID
func (_m *CommunityUsecase) GetReports(userID uint, communityID uint) ([]dto.BriefReportResponse, error) {
	ret := _m.Called(userID, communityID)

	var r0 []dto.BriefReportResponse
	if rf, ok := ret.Get(0).(func(uint, uint) []dto.BriefReportResponse); ok {
		r0 = rf(userID, communityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.BriefReportResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadCommunity provides a mock function with given fields: userID, communityID
func (_m *CommunityUsecase) GetThreadCommunity(userID uint, communityID uint) ([]threaddto.DetailedThreadResponse, error) {
	ret := _m.Called(userID, communityID)

	var r0 []threaddto.DetailedThreadResponse
	if rf, ok := ret.Get(0).(func(uint, uint) []threaddto.DetailedThreadResponse); ok {
		r0 = rf(userID, communityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]threaddto.DetailedThreadResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, communityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveModerator provides a mock function with given fields: moderatorReq, role
func (_m *CommunityUsecase) RemoveModerator(moderatorReq dto.CommunityModeratorRequest, role string) error {
	ret := _m.Called(moderatorReq, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.CommunityModeratorRequest, string) error); ok {
		r0 = rf(moderatorReq, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportByModerator provides a mock function with given fields: userID, communityID, reportReq
func (_m *CommunityUsecase) ReportByModerator(userID uint, communityID uint, reportReq dto.ReportRequest) error {
	ret := _m.Called(userID, communityID, reportReq)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, dto.ReportRequest) error); ok {
		r0 = rf(userID, communityID, reportReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportCommunity provides a mock function with given fields: userID, communityID, reportCategoryID
func (_m *CommunityUsecase) ReportCommunity(userID uint, communityID uint, reportCategoryID uint) error {
	ret := _m.Called(userID, communityID, reportCategoryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, uint) error); ok {
		r0 = rf(userID, communityID, reportCategoryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBackgroundImage provides a mock function with given fields: id, img, role
func (_m *CommunityUsecase) SetBackgroundImage(id uint, img *multipart.FileHeader, role string) (string, error) {
	ret := _m.Called(id, img, role)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, *multipart.FileHeader, string) string); ok {
		r0 = rf(id, img, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *multipart.FileHeader, string) error); ok {
		r1 = rf(id, img, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetImage provides a mock function with given fields: id, img, role
func (_m *CommunityUsecase) SetImage(id uint, img *multipart.FileHeader, role string) (string, error) {
	ret := _m.Called(id, img, role)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, *multipart.FileHeader, string) string); ok {
		r0 = rf(id, img, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *multipart.FileHeader, string) error); ok {
		r1 = rf(id, img, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCommunity provides a mock function with given fields: _a0, role
func (_m *CommunityUsecase) StoreCommunity(_a0 dto.CommunityRequest, role string) error {
	ret := _m.Called(_a0, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.CommunityRequest, string) error); ok {
		r0 = rf(_a0, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnfollowCommunity provides a mock function with given fields: userID, communityID
func (_m *CommunityUsecase) UnfollowCommunity(userID uint, communityID uint) error {
	ret := _m.Called(userID, communityID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, communityID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCommunity provides a mock function with given fields: id, _a1, role
func (_m *CommunityUsecase) UpdateCommunity(id uint, _a1 dto.CommunityRequest, role string) (dto.CommunityUpdateResponse, error) {
	ret := _m.Called(id, _a1, role)

	var r0 dto.CommunityUpdateResponse
	if rf, ok := ret.Get(0).(func(uint, dto.CommunityRequest, string) dto.CommunityUpdateResponse); ok {
		r0 = rf(id, _a1, role)
	} else {
		r0 = ret.Get(0).(dto.CommunityUpdateResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, dto.CommunityRequest, string) error); ok {
		r1 = rf(id, _a1, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommunityUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommunityUsecase creates a new instance of CommunityUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommunityUsecase(t mockConstructorTestingTNewCommunityUsecase) *CommunityUsecase {
	mock := &CommunityUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
