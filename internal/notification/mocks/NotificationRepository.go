// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "macaiki/internal/notification/entity"

	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// DeleleteAllNotifications provides a mock function with given fields: userID
func (_m *NotificationRepository) DeleleteAllNotifications(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNotifications provides a mock function with given fields: userID
func (_m *NotificationRepository) GetAllNotifications(userID uint) ([]entity.Notification, error) {
	ret := _m.Called(userID)

	var r0 []entity.Notification
	if rf, ok := ret.Get(0).(func(uint) []entity.Notification); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Notification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotification provides a mock function with given fields: notificationID
func (_m *NotificationRepository) GetNotification(notificationID uint) (entity.Notification, error) {
	ret := _m.Called(notificationID)

	var r0 entity.Notification
	if rf, ok := ret.Get(0).(func(uint) entity.Notification); ok {
		r0 = rf(notificationID)
	} else {
		r0 = ret.Get(0).(entity.Notification)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(notificationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAllNotifications provides a mock function with given fields: userID
func (_m *NotificationRepository) ReadAllNotifications(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadNotification provides a mock function with given fields: notificationID
func (_m *NotificationRepository) ReadNotification(notificationID uint) error {
	ret := _m.Called(notificationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(notificationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreNotification provides a mock function with given fields: _a0
func (_m *NotificationRepository) StoreNotification(_a0 entity.Notification) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Notification) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNotificationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationRepository(t mockConstructorTestingTNewNotificationRepository) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
