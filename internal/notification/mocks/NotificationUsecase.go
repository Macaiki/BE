// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "macaiki/internal/notification/dto"

	mock "github.com/stretchr/testify/mock"
)

// NotificationUsecase is an autogenerated mock type for the NotificationUsecase type
type NotificationUsecase struct {
	mock.Mock
}

// DeleteAllNotifications provides a mock function with given fields: userID
func (_m *NotificationUsecase) DeleteAllNotifications(userID uint) ([]dto.NotificationResponse, error) {
	ret := _m.Called(userID)

	var r0 []dto.NotificationResponse
	if rf, ok := ret.Get(0).(func(uint) []dto.NotificationResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllNotifications provides a mock function with given fields: userID
func (_m *NotificationUsecase) GetAllNotifications(userID uint) ([]dto.NotificationResponse, error) {
	ret := _m.Called(userID)

	var r0 []dto.NotificationResponse
	if rf, ok := ret.Get(0).(func(uint) []dto.NotificationResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificatoinDetail provides a mock function with given fields: userID, notificationID
func (_m *NotificationUsecase) GetNotificatoinDetail(userID uint, notificationID uint) (interface{}, error) {
	ret := _m.Called(userID, notificationID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint, uint) interface{}); ok {
		r0 = rf(userID, notificationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, notificationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAllNotifications provides a mock function with given fields: userID
func (_m *NotificationUsecase) ReadAllNotifications(userID uint) ([]dto.NotificationResponse, error) {
	ret := _m.Called(userID)

	var r0 []dto.NotificationResponse
	if rf, ok := ret.Get(0).(func(uint) []dto.NotificationResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.NotificationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNotificationUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationUsecase creates a new instance of NotificationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationUsecase(t mockConstructorTestingTNewNotificationUsecase) *NotificationUsecase {
	mock := &NotificationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
