// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "macaiki/internal/report_category/entity"

	mock "github.com/stretchr/testify/mock"
)

// ReportCategoryRepository is an autogenerated mock type for the ReportCategoryRepository type
type ReportCategoryRepository struct {
	mock.Mock
}

// DeleteReportCategory provides a mock function with given fields: reportCategory
func (_m *ReportCategoryRepository) DeleteReportCategory(reportCategory entity.ReportCategory) error {
	ret := _m.Called(reportCategory)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ReportCategory) error); ok {
		r0 = rf(reportCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllReportCategory provides a mock function with given fields:
func (_m *ReportCategoryRepository) GetAllReportCategory() ([]entity.ReportCategory, error) {
	ret := _m.Called()

	var r0 []entity.ReportCategory
	if rf, ok := ret.Get(0).(func() []entity.ReportCategory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReportCategory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportCategory provides a mock function with given fields: id
func (_m *ReportCategoryRepository) GetReportCategory(id uint) (entity.ReportCategory, error) {
	ret := _m.Called(id)

	var r0 entity.ReportCategory
	if rf, ok := ret.Get(0).(func(uint) entity.ReportCategory); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.ReportCategory)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreReportCategory provides a mock function with given fields: reportCategory
func (_m *ReportCategoryRepository) StoreReportCategory(reportCategory entity.ReportCategory) error {
	ret := _m.Called(reportCategory)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ReportCategory) error); ok {
		r0 = rf(reportCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReportCategory provides a mock function with given fields: reportCategory
func (_m *ReportCategoryRepository) UpdateReportCategory(reportCategory entity.ReportCategory) error {
	ret := _m.Called(reportCategory)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ReportCategory) error); ok {
		r0 = rf(reportCategory)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewReportCategoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReportCategoryRepository creates a new instance of ReportCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReportCategoryRepository(t mockConstructorTestingTNewReportCategoryRepository) *ReportCategoryRepository {
	mock := &ReportCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
