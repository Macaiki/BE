// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "macaiki/internal/report_category/dto"

	mock "github.com/stretchr/testify/mock"
)

// ReportCategoryUsecase is an autogenerated mock type for the ReportCategoryUsecase type
type ReportCategoryUsecase struct {
	mock.Mock
}

// CreateReportCategory provides a mock function with given fields: reportCategory, role
func (_m *ReportCategoryUsecase) CreateReportCategory(reportCategory dto.ReportCategoryRequest, role string) error {
	ret := _m.Called(reportCategory, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.ReportCategoryRequest, string) error); ok {
		r0 = rf(reportCategory, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReportCategory provides a mock function with given fields: id, role
func (_m *ReportCategoryUsecase) DeleteReportCategory(id uint, role string) error {
	ret := _m.Called(id, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string) error); ok {
		r0 = rf(id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllReportCategory provides a mock function with given fields:
func (_m *ReportCategoryUsecase) GetAllReportCategory() ([]dto.ReportCategoryResponse, error) {
	ret := _m.Called()

	var r0 []dto.ReportCategoryResponse
	if rf, ok := ret.Get(0).(func() []dto.ReportCategoryResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.ReportCategoryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportCategory provides a mock function with given fields: id
func (_m *ReportCategoryUsecase) GetReportCategory(id uint) (dto.ReportCategoryResponse, error) {
	ret := _m.Called(id)

	var r0 dto.ReportCategoryResponse
	if rf, ok := ret.Get(0).(func(uint) dto.ReportCategoryResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(dto.ReportCategoryResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportCategory provides a mock function with given fields: reportCategory, id, role
func (_m *ReportCategoryUsecase) UpdateReportCategory(reportCategory dto.ReportCategoryRequest, id uint, role string) error {
	ret := _m.Called(reportCategory, id, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(dto.ReportCategoryRequest, uint, string) error); ok {
		r0 = rf(reportCategory, id, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewReportCategoryUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewReportCategoryUsecase creates a new instance of ReportCategoryUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReportCategoryUsecase(t mockConstructorTestingTNewReportCategoryUsecase) *ReportCategoryUsecase {
	mock := &ReportCategoryUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
