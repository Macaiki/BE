// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "macaiki/internal/thread/entity"

	mock "github.com/stretchr/testify/mock"
)

// ThreadRepository is an autogenerated mock type for the ThreadRepository type
type ThreadRepository struct {
	mock.Mock
}

// AddThreadComment provides a mock function with given fields: comment
func (_m *ThreadRepository) AddThreadComment(comment entity.Comment) error {
	ret := _m.Called(comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCommentReport provides a mock function with given fields: commentReport
func (_m *ThreadRepository) CreateCommentReport(commentReport entity.CommentReport) error {
	ret := _m.Called(commentReport)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.CommentReport) error); ok {
		r0 = rf(commentReport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateThread provides a mock function with given fields: _a0
func (_m *ThreadRepository) CreateThread(_a0 entity.Thread) (entity.Thread, error) {
	ret := _m.Called(_a0)

	var r0 entity.Thread
	if rf, ok := ret.Get(0).(func(entity.Thread) entity.Thread); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(entity.Thread)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Thread) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThreadReport provides a mock function with given fields: threadReport
func (_m *ThreadRepository) CreateThreadReport(threadReport entity.ThreadReport) error {
	ret := _m.Called(threadReport)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ThreadReport) error); ok {
		r0 = rf(threadReport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: commentID
func (_m *ThreadRepository) DeleteComment(commentID uint) error {
	ret := _m.Called(commentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteThread provides a mock function with given fields: threadID
func (_m *ThreadRepository) DeleteThread(threadID uint) error {
	ret := _m.Called(threadID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(threadID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownvoteThread provides a mock function with given fields: downvote
func (_m *ThreadRepository) DownvoteThread(downvote entity.ThreadDownvote) error {
	ret := _m.Called(downvote)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ThreadDownvote) error); ok {
		r0 = rf(downvote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommentByID provides a mock function with given fields: commentID
func (_m *ThreadRepository) GetCommentByID(commentID uint) (entity.Comment, error) {
	ret := _m.Called(commentID)

	var r0 entity.Comment
	if rf, ok := ret.Get(0).(func(uint) entity.Comment); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Get(0).(entity.Comment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentReport provides a mock function with given fields: id
func (_m *ThreadRepository) GetCommentReport(id uint) (entity.CommentReport, error) {
	ret := _m.Called(id)

	var r0 entity.CommentReport
	if rf, ok := ret.Get(0).(func(uint) entity.CommentReport); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.CommentReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByThreadID provides a mock function with given fields: threadID
func (_m *ThreadRepository) GetCommentsByThreadID(threadID uint) ([]entity.CommentDetails, error) {
	ret := _m.Called(threadID)

	var r0 []entity.CommentDetails
	if rf, ok := ret.Get(0).(func(uint) []entity.CommentDetails); ok {
		r0 = rf(threadID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CommentDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(threadID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSavedThread provides a mock function with given fields: userID
func (_m *ThreadRepository) GetSavedThread(userID uint) ([]entity.ThreadWithDetails, error) {
	ret := _m.Called(userID)

	var r0 []entity.ThreadWithDetails
	if rf, ok := ret.Get(0).(func(uint) []entity.ThreadWithDetails); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ThreadWithDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadByID provides a mock function with given fields: threadID
func (_m *ThreadRepository) GetThreadByID(threadID uint) (entity.Thread, error) {
	ret := _m.Called(threadID)

	var r0 entity.Thread
	if rf, ok := ret.Get(0).(func(uint) entity.Thread); ok {
		r0 = rf(threadID)
	} else {
		r0 = ret.Get(0).(entity.Thread)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(threadID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadDownvotes provides a mock function with given fields: threadID, userID
func (_m *ThreadRepository) GetThreadDownvotes(threadID uint, userID uint) (entity.ThreadDownvote, error) {
	ret := _m.Called(threadID, userID)

	var r0 entity.ThreadDownvote
	if rf, ok := ret.Get(0).(func(uint, uint) entity.ThreadDownvote); ok {
		r0 = rf(threadID, userID)
	} else {
		r0 = ret.Get(0).(entity.ThreadDownvote)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(threadID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadReport provides a mock function with given fields: id
func (_m *ThreadRepository) GetThreadReport(id uint) (entity.ThreadReport, error) {
	ret := _m.Called(id)

	var r0 entity.ThreadReport
	if rf, ok := ret.Get(0).(func(uint) entity.ThreadReport); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.ThreadReport)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadUpvotes provides a mock function with given fields: threadID, userID
func (_m *ThreadRepository) GetThreadUpvotes(threadID uint, userID uint) (entity.ThreadUpvote, error) {
	ret := _m.Called(threadID, userID)

	var r0 entity.ThreadUpvote
	if rf, ok := ret.Get(0).(func(uint, uint) entity.ThreadUpvote); ok {
		r0 = rf(threadID, userID)
	} else {
		r0 = ret.Get(0).(entity.ThreadUpvote)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(threadID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreads provides a mock function with given fields: keyword, userID
func (_m *ThreadRepository) GetThreads(keyword string, userID uint) ([]entity.ThreadWithDetails, error) {
	ret := _m.Called(keyword, userID)

	var r0 []entity.ThreadWithDetails
	if rf, ok := ret.Get(0).(func(string, uint) []entity.ThreadWithDetails); ok {
		r0 = rf(keyword, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ThreadWithDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(keyword, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadsByUserID provides a mock function with given fields: userID
func (_m *ThreadRepository) GetThreadsByUserID(userID uint) ([]entity.Thread, error) {
	ret := _m.Called(userID)

	var r0 []entity.Thread
	if rf, ok := ret.Get(0).(func(uint) []entity.Thread); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Thread)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadsFromFollowedCommunity provides a mock function with given fields: userID
func (_m *ThreadRepository) GetThreadsFromFollowedCommunity(userID uint) ([]entity.ThreadWithDetails, error) {
	ret := _m.Called(userID)

	var r0 []entity.ThreadWithDetails
	if rf, ok := ret.Get(0).(func(uint) []entity.ThreadWithDetails); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ThreadWithDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadsFromFollowedUsers provides a mock function with given fields: userID
func (_m *ThreadRepository) GetThreadsFromFollowedUsers(userID uint) ([]entity.ThreadWithDetails, error) {
	ret := _m.Called(userID)

	var r0 []entity.ThreadWithDetails
	if rf, ok := ret.Get(0).(func(uint) []entity.ThreadWithDetails); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ThreadWithDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrendingThreads provides a mock function with given fields: userID
func (_m *ThreadRepository) GetTrendingThreads(userID uint) ([]entity.ThreadWithDetails, error) {
	ret := _m.Called(userID)

	var r0 []entity.ThreadWithDetails
	if rf, ok := ret.Get(0).(func(uint) []entity.ThreadWithDetails); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ThreadWithDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrendingThreadsWithLimit provides a mock function with given fields: userID, limit
func (_m *ThreadRepository) GetTrendingThreadsWithLimit(userID uint, limit int) ([]entity.ThreadWithDetails, error) {
	ret := _m.Called(userID, limit)

	var r0 []entity.ThreadWithDetails
	if rf, ok := ret.Get(0).(func(uint, int) []entity.ThreadWithDetails); ok {
		r0 = rf(userID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ThreadWithDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, int) error); ok {
		r1 = rf(userID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeComment provides a mock function with given fields: commentLikes
func (_m *ThreadRepository) LikeComment(commentLikes entity.CommentLikes) error {
	ret := _m.Called(commentLikes)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.CommentLikes) error); ok {
		r0 = rf(commentLikes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetThreadImage provides a mock function with given fields: imageURL, threadID
func (_m *ThreadRepository) SetThreadImage(imageURL string, threadID uint) error {
	ret := _m.Called(imageURL, threadID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(imageURL, threadID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreSavedThread provides a mock function with given fields: savedThread
func (_m *ThreadRepository) StoreSavedThread(savedThread entity.SavedThread) error {
	ret := _m.Called(savedThread)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.SavedThread) error); ok {
		r0 = rf(savedThread)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UndoDownvoteThread provides a mock function with given fields: threadID, userID
func (_m *ThreadRepository) UndoDownvoteThread(threadID uint, userID uint) error {
	ret := _m.Called(threadID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(threadID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UndoUpvoteThread provides a mock function with given fields: threadID, userID
func (_m *ThreadRepository) UndoUpvoteThread(threadID uint, userID uint) error {
	ret := _m.Called(threadID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(threadID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlikeComment provides a mock function with given fields: commentID, userID
func (_m *ThreadRepository) UnlikeComment(commentID uint, userID uint) error {
	ret := _m.Called(commentID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(commentID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCommentReport provides a mock function with given fields: commentReport, userID
func (_m *ThreadRepository) UpdateCommentReport(commentReport entity.CommentReport, userID uint) error {
	ret := _m.Called(commentReport, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.CommentReport, uint) error); ok {
		r0 = rf(commentReport, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateThread provides a mock function with given fields: threadID, _a1
func (_m *ThreadRepository) UpdateThread(threadID uint, _a1 entity.Thread) error {
	ret := _m.Called(threadID, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, entity.Thread) error); ok {
		r0 = rf(threadID, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateThreadReport provides a mock function with given fields: threadReport, userID
func (_m *ThreadRepository) UpdateThreadReport(threadReport entity.ThreadReport, userID uint) error {
	ret := _m.Called(threadReport, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ThreadReport, uint) error); ok {
		r0 = rf(threadReport, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpvoteThread provides a mock function with given fields: threadUpvote
func (_m *ThreadRepository) UpvoteThread(threadUpvote entity.ThreadUpvote) error {
	ret := _m.Called(threadUpvote)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ThreadUpvote) error); ok {
		r0 = rf(threadUpvote)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewThreadRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewThreadRepository creates a new instance of ThreadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewThreadRepository(t mockConstructorTestingTNewThreadRepository) *ThreadRepository {
	mock := &ThreadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
