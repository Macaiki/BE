// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "macaiki/internal/user/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UserRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Follow provides a mock function with given fields: _a0, userFollower
func (_m *UserRepository) Follow(_a0 entity.User, userFollower entity.User) (entity.User, error) {
	ret := _m.Called(_a0, userFollower)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(entity.User, entity.User) entity.User); ok {
		r0 = rf(_a0, userFollower)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.User, entity.User) error); ok {
		r1 = rf(_a0, userFollower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *UserRepository) Get(id uint) (entity.User, error) {
	ret := _m.Called(id)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(uint) entity.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithDetail provides a mock function with given fields: userID, search
func (_m *UserRepository) GetAllWithDetail(userID uint, search string) ([]entity.User, error) {
	ret := _m.Called(userID, search)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(uint, string) []entity.User); ok {
		r0 = rf(userID, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetByEmail(email string) (entity.User, error) {
	ret := _m.Called(email)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: username
func (_m *UserRepository) GetByUsername(username string) (entity.User, error) {
	ret := _m.Called(username)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardAnalytics provides a mock function with given fields:
func (_m *UserRepository) GetDashboardAnalytics() (entity.AdminDashboardAnalytics, error) {
	ret := _m.Called()

	var r0 entity.AdminDashboardAnalytics
	if rf, ok := ret.Get(0).(func() entity.AdminDashboardAnalytics); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.AdminDashboardAnalytics)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFollower provides a mock function with given fields: userID, getFollowingUserID
func (_m *UserRepository) GetFollower(userID uint, getFollowingUserID uint) ([]entity.User, error) {
	ret := _m.Called(userID, getFollowingUserID)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(uint, uint) []entity.User); ok {
		r0 = rf(userID, getFollowingUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, getFollowingUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFollowerNumber provides a mock function with given fields: id
func (_m *UserRepository) GetFollowerNumber(id uint) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFollowing provides a mock function with given fields: userID, getFollowingUserID
func (_m *UserRepository) GetFollowing(userID uint, getFollowingUserID uint) ([]entity.User, error) {
	ret := _m.Called(userID, getFollowingUserID)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(uint, uint) []entity.User); ok {
		r0 = rf(userID, getFollowingUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, getFollowingUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFollowingNumber provides a mock function with given fields: id
func (_m *UserRepository) GetFollowingNumber(id uint) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOTP provides a mock function with given fields: email
func (_m *UserRepository) GetOTP(email string) (entity.VerificationEmail, error) {
	ret := _m.Called(email)

	var r0 entity.VerificationEmail
	if rf, ok := ret.Get(0).(func(string) entity.VerificationEmail); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(entity.VerificationEmail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReports provides a mock function with given fields:
func (_m *UserRepository) GetReports() ([]entity.BriefReport, error) {
	ret := _m.Called()

	var r0 []entity.BriefReport
	if rf, ok := ret.Get(0).(func() []entity.BriefReport); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BriefReport)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreadsNumber provides a mock function with given fields: id
func (_m *UserRepository) GetThreadsNumber(id uint) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserImage provides a mock function with given fields: id, imageURL, tableName
func (_m *UserRepository) SetUserImage(id uint, imageURL string, tableName string) error {
	ret := _m.Called(id, imageURL, tableName)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, string) error); ok {
		r0 = rf(id, imageURL, tableName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: _a0
func (_m *UserRepository) Store(_a0 entity.User) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreOTP provides a mock function with given fields: VerifyEmail
func (_m *UserRepository) StoreOTP(VerifyEmail entity.VerificationEmail) error {
	ret := _m.Called(VerifyEmail)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.VerificationEmail) error); ok {
		r0 = rf(VerifyEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreReport provides a mock function with given fields: userReport
func (_m *UserRepository) StoreReport(userReport entity.UserReport) error {
	ret := _m.Called(userReport)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.UserReport) error); ok {
		r0 = rf(userReport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unfollow provides a mock function with given fields: _a0, userFollower
func (_m *UserRepository) Unfollow(_a0 entity.User, userFollower entity.User) (entity.User, error) {
	ret := _m.Called(_a0, userFollower)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(entity.User, entity.User) entity.User); ok {
		r0 = rf(_a0, userFollower)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.User, entity.User) error); ok {
		r1 = rf(_a0, userFollower)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userDB, _a1
func (_m *UserRepository) Update(userDB *entity.User, _a1 entity.User) (entity.User, error) {
	ret := _m.Called(userDB, _a1)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(*entity.User, entity.User) entity.User); ok {
		r0 = rf(userDB, _a1)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User, entity.User) error); ok {
		r1 = rf(userDB, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
